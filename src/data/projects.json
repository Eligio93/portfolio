[
    {
        "title": "EC Blog",
        "description": "EcBlog is a full-stack application that includes two FrontEnds and one Backend. The two front ends are the client side, which is the actual blog open to everyone where various articles are present, and users can leave comments after registering. The other front end is the CMS side, which is reserved for blog administration where it is possible to edit, publish, feature, and delete articles and comments.Both of the FrontEnds are developed using React + Vite, the Backend using Node.js + Express and MongoDB as database",
        "tech-stack": [
            {
                "name": "HTML",
                "icon": "/images/htmlIcon.svg"
            },
            {
                "name": "CSS",
                "icon": "/images/cssIcon.svg"
            },
            {
                "name": "Javascript",
                "icon": "/images/javascriptIcon.svg"
            },
            {
                "name": "Mongo DB",
                "icon": "/images/mongoDbIcon.svg"
            },
            {
                "name": "Node",
                "icon": "/images/nodeIcon.svg"
            },
            {
                "name":"Express",
                "icon": "/images/expressIcon.svg"
            },
            {
                "name":"React",
                "icon":"/images/reactIcon.svg"
            },
            {
                "name":"Vite",
                "icon":"/images/viteIcon.svg"
            }
        ],
        "desktop-image": "/images/blogAPID.png",
        "mobile-image": "/images/blogAPIM.png",
        "readMe": [
            {
                "description": "",
                "struggles": "",
                "conclusion": ""
            }
        ],
        "gitHub": "https://github.com/Eligio93/BlogAPI",
        "live": "https://ec-blogapi.netlify.app/"
    },
    {
        "title": "Server Inventory App",
        "description": "The server-side application is developed using Node.js and Express, utilizing MongoDB as Database. This application allows users to manage inventory and stock for their store. For the front-end is been used CSS and PUG as HTML generator. The app is been deployed using Railway",
        "tech-stack": [
            {
                "name": "PUG",
                "icon": "/images/pugIcon.svg"
            },
            {
                "name": "CSS",
                "icon": "/images/cssIcon.svg"
            },
            {
                "name": "Javascript",
                "icon": "/images/javascriptIcon.svg"
            },
            {
                "name": "Mongo DB",
                "icon": "/images/mongoDbIcon.svg"
            },
            {
                "name": "Node",
                "icon": "/images/nodeIcon.svg"
            },
            {
                "name":"Express",
                "icon": "/images/expressIcon.svg"
            }
        ],
        "desktop-image": "/images/inventoryAppD.png",
        "mobile-image": "/images/inventoryAppM.png",
        "readMe": [
            {
                "description": "",
                "struggles": "",
                "conclusion": ""
            }
        ],
        "gitHub": "https://github.com/Eligio93/inventory-app",
        "live": "https://ec-inventory-app.up.railway.app/"
    },
    {
        "title": "Shopping Cart",
        "description": "Smalll E-Commerce App, developed in React which allows the user to add to a shopping cart, fake items fetched through an API call. The App doesn’t collect payments",
        "tech-stack": [
            {
                "name": "HTML",
                "icon": "/images/htmlIcon.svg"
            },
            {
                "name": "CSS",
                "icon": "/images/cssIcon.svg"
            },
            {
                "name": "Javascript",
                "icon": "/images/javascriptIcon.svg"
            },
            {
                "name": "React",
                "icon": "/images/reactIcon.svg"
            },
            {
                "name": "Vite",
                "icon": "/images/viteIcon.svg"
            }
        ],
        "desktop-image": "/images/shoppingCartD.png",
        "mobile-image": "/images/shoppingCartM.png",
        "readMe": [
            {
                "description": "The goal of this project was to develop a mini e-commerce platform utilizing React's router. The main objective was to create an interface where users could browse products fetched from a faux catalog through API calls. Alongside this functionality, users should have the ability to dynamically add and remove items from their shopping cart. Additionally, I took the opportunity to implement responsiveness for the first time, ensuring the site adapts seamlessly to various screen sizes.",
                "struggles": "I encountered the most difficulty with using the router, particularly in figuring out how to structure the components. Initially, I struggled with deciding whether to place all components as children of a main directory or to create separate directories for each individual page. Additionally, I found that passing props to deeply nested components could become a tedious and repetitive task. This is something I plan to examine further for future projects, as it can impact code organization and efficiency.",
                "conclusion": "I really enjoyed watching this project evolve into something that can finally be considered a real-world project. I've gained a lot more proficiency with React and its functionalities, and I believe I've done a good job with responsiveness, which I had never implemented before.In the project, I still need to implement the input validation part, thus not allowing the user to enter quantities less than 1 for each selected product."
            }
        ],
        "gitHub": "https://github.com/Eligio93/shopping-cart",
        "live": "https://ec-shoppingcart.netlify.app/"
    },
    {
        "title": "CV Generator",
        "description": "Small Application built in React that allows the user to generate, after filling all forms, a well formatted CV with a 2 column layout. The user is also able to print the document or download it in PDF format",
        "tech-stack": [
            {
                "name": "HTML",
                "icon": "/images/htmlIcon.svg"
            },
            {
                "name": "CSS",
                "icon": "/images/cssIcon.svg"
            },
            {
                "name": "Javascript",
                "icon": "/images/javascriptIcon.svg"
            },
            {
                "name": "React",
                "icon": "/images/reactIcon.svg"
            },
            {
                "name": "Vite",
                "icon": "/images/viteIcon.svg"
            }
        ],
        "desktop-image": "/images/cvGeneratorD.png",
        "mobile-image": "/images/cvGeneratorM.png",
        "readMe": [
            {
                "description": "Embarking on my first React project, I am developing a web application that allows users to effortlessly create and manage their CVs. The user-friendly interface features dynamic forms for inputting personal details. Users can easily edit or delete information based on their preferences, providing flexibility and control. The goal is to deliver a seamless and visually appealing experience, empowering users to craft and refine their professional profiles with ease.",
                "struggles": "Initially, I struggled with understanding how to use a single function to handle each component of the application and effectively target them using IDs and values (refer to line 33 in App.jsx). Subsequently, my primary challenge, which was also the main goal of the project, was figuring out how to use props and lift state to facilitate communication between different components. While my code works, it feels somewhat repetitive. The same goes for states; I grasped their general structure and purpose, but at times, I found myself getting lost in the React DOM tree among various components. I believe the project has been executed correctly, but there's certainly room for further optimization.",
                "conclusion": "This project has been enjoyable for me as it provided a preliminary glimpse into the capabilities of React. I am pleased with the overall validity and functionality of my project. Additionally, I incorporated a couple of extra features – printing and downloading the CV – which allowed me to delve into print media queries and document download functions. This involved installing packages such as html2canvas and jspdf, broadening my understanding of additional tools and functionalities within the React ecosystem."
            }
        ],
        "gitHub": "https://github.com/Eligio93/CV-application",
        "live": "https://ec-cv-application.netlify.app/"
    },
    {
        "title": "Memory Card Game",
        "description": "Classic Memory Card game developed in Vite React, where the user is not allowed to click on the same picture more than once. Using React States is possible to keep track of the best score and show a winning message when the user wins",
        "tech-stack": [
            {
                "name": "HTML",
                "icon": "/images/htmlIcon.svg"
            },
            {
                "name": "CSS",
                "icon": "/images/cssIcon.svg"
            },
            {
                "name": "Javascript",
                "icon": "/images/javascriptIcon.svg"
            },
            {
                "name": "React",
                "icon": "/images/reactIcon.svg"
            },
            {
                "name": "Vite",
                "icon": "/images/viteIcon.svg"
            }
        ],
        "desktop-image": "/images/memoryCardD.png",
        "mobile-image": "/images/memoryCardM.png",
        "readMe": [
            {
                "description": "In this project, I had to develop a memory card game. The rule of the game is not to click on a card more than once. Each time you click on a card, the score increases, also recording the best score until you click on all the cards. In that case, you win the game",
                "struggles": "I managed to develop this game without major difficulties. However, I had to use the useEffect hook in React for the first time along with an API call. I also spent a lot of time on styling the entire project, including positioning the cards and adapting the images from the API call.",
                "conclusion": "I enjoyed developing this game as it provided me with additional practice with React components and hooks. Furthermore, it was helpful to review API call handling. Generally, the project is quite responsive in terms of content placement, such as the positioning of the cards. However, I think I will revisit the header and footer for usability on devices with smaller screens."
            }
        ],
        "gitHub": "https://github.com/Eligio93/memory-card",
        "live": "https://ec-memorycard.netlify.app/"
    },
    {
        "title": "Weather App",
        "description": "Simple weather app that, through an API call, retrieve all weather data regarding an User’s Input Location. Note: Initally the app displayed up to 5 days of forecast but, due to API key limitation, now it displays just 2",
        "tech-stack": [
            {
                "name": "HTML",
                "icon": "/images/htmlIcon.svg"
            },
            {
                "name": "CSS",
                "icon": "/images/cssIcon.svg"
            },
            {
                "name": "Javascript",
                "icon": "/images/javascriptIcon.svg"
            },
            {
                "name": "Webpack",
                "icon": "/images/webpackIcon.svg"
            }
        ],
        "desktop-image": "/images/weatherAppD.png",
        "mobile-image": "/images/weatherAppM.png",
        "readMe": [
            {
                "description": "The purpose of this project was to build a weather app, incorporating asynchronous functions and APIs for the first time. After fetching the data, the goal was to create an object containing only the necessary information and display these city-specific details to the user.",
                "struggles": "Initially, this project might have seemed straightforward, but I faced several challenges in deciding on the project's structure. Where should I place the right functions in modules? How many functions do I need to display the data? Is one function enough, or do I need a different function for each section of the project to show the data? A second difficulty was handling API calls, data fetching, and promises. It felt like I was using data fetching more than necessary, and I encountered some difficulties in handling fetch-related errors. Later, I realized that the forecast fetch also contained data related to the input city, so I could have constructed the object based solely on that call. The last point where I encountered problems was adding EventListeners to the buttons in the document. Managing a button that invokes a dynamically created asynchronous function was quite complicated. I resolved it by adding the event listener in the same function that creates the button, but event delegation could have also been used.",
                "conclusion": "This project helped me understand and practice asynchronous functions and promises. Additionally, it was interesting and enjoyable to use API calls for the first time."
            }
        ],
        "gitHub": "https://github.com/Eligio93/weather-app",
        "live": "https://ec-weather.netlify.app/"
    }
]